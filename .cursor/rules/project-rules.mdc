---
description: 
globs: 
alwaysApply: true
---
# Project Rules for DJ Controller App

## Overview
This is a Tauri 2.0 desktop application with Svelte 5 (TypeScript) frontend and Bun as the package manager. The app is a DJ controller allowing users to load two songs and mix them together. The project structure is:

- `src/`: Svelte 5 frontend code (UI, song loading, mixing controls).
- `src-tauri/`: Rust code for native functionality (audio transformations, parsing).
- `.cursor/rules/`: Cursor rules for LLM guidance.

Follow these rules to ensure correct, up-to-date, and project-specific code generation.

## General Rules
- Use **TypeScript** for all JavaScript/TS code with strict mode enabled (`"strict": true` in `tsconfig.json`).
- Prefer **interfaces** over types for TypeScript definitions.
- Avoid enums; use const objects for better type safety.
- Use **Bun** as the package manager. Commands:
  - Install dependencies: `bun install`
  - Run dev server: `bun run dev`
  - Build: `bun run build`
- Follow the official Svelte 5, Tauri 2.0, and TypeScript documentation for best practices.
- Maintain a clear separation between frontend (`src/`) and backend (`src-tauri/`).

## Rust Rules
Rust edition `2024` must be used. All packages and syntax must follow the `2024` edition and syntax specific to prior editions must be avoided.
- Snake case should be used for communication types when interfacing with frontend (Svelte) APIs, which should be set to camel case with `#[serde(rename_all = "camelCase")]`

## Svelte 5 Rules
Svelte 5 uses runes and updated syntax. LLMs must avoid Svelte 4 patterns.
- Camel case should be used for all interfaces that communicate with the backend (Rust) APIs

### Reactivity
- Use `$state` for reactive state:
  ```typescript
  let count = $state(0);
  ```
- Use `$derived` for computed values:
  ```typescript
  let doubled = $derived(count * 2);
  ```
- Use `$effect` for side effects and lifecycle:
  ```typescript
  $effect(() => {
    console.log(`Count is now ${count}`);
  });
  ```
- **Avoid** Svelte 4 `$:` reactive statements.

### Component Props
- Use `$props` for declaring props:
  ```typescript
  let { optionalProp = 42, requiredProp } = $props<{ optionalProp?: number; requiredProp: string }>();
  ```
- Use `$bindable` for two-way bindable props:
  ```typescript
  let { value = $bindable() } = $props<{ value?: number }>();
  ```
- **Avoid** Svelte 4 `export let` syntax.

### Event Handling
- Use `onclick`, `onkeydown`, etc., instead of Svelte 4 `on:` syntax:
  ```svelte
  <button onclick={() => count++}>Increment</button>
  ```
- **Avoid** `on:click`, `on:keydown`, etc.

### Component Development
- Use kebab-case for component file names (e.g., `song-player.svelte`).
- Create `.svelte` files for UI components and `.svelte.ts` for state logic:
  ```typescript
  // song-player.svelte.ts
  class SongPlayer {
    track = $state(null);
    volume = $state(50);
    play() { /* Rust IPC call */ }
  }
  export const songPlayer = new SongPlayer();
  ```
  ```svelte
  <!-- song-player.svelte -->
  <script lang="ts">
    import { songPlayer } from './song-player.svelte.ts';
  </script>
  <div>Track: {songPlayer.track?.name}</div>
  ```
- Use Svelte stores for global state (e.g., playlist management):
  ```typescript
  // src/lib/stores.ts
  import { writable } from 'svelte/store';
  export const playlist = writable<Song[]>([]);
  ```

### UI and Styling
- Use **Tailwind CSS** for styling with the `cn()` utility from `$lib/utils`.
- Import Shadcn components from `$lib/components/ui` for reusable UI elements.
- Define CSS variables without color space functions:
  ```css
  :root {
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
  }
  ```
- Example usage:
  ```svelte
  <div class="bg-primary text-primary-foreground">Mixing Panel</div>
  ```

## Tauri 2.0 Rules
- Use `@sveltejs/adapter-static` in `svelte.config.js` to disable SSR and enable SSG or SPA mode:
  ```javascript
  import adapter from '@sveltejs/adapter-static';
  import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';
  export default {
    preprocess: vitePreprocess(),
    kit: { adapter: adapter() }
  };
  ```
- Disable SSR in `src/routes/+layout.ts`:
  ```typescript
  export const ssr = false;
  export const prerender = true;
  ```
- Configure `tauri.conf.json` in `src-tauri/`:
  - Set `build.distDir` to `../build`.
  - Set `build.devPath` to `http://localhost:5173`.
  - Example:
    ```json
    {
      "build": {
        "beforeBuildCommand": "bun run build",
        "beforeDevCommand": "bun run dev",
        "devPath": "http://localhost:5173",
        "distDir": "../build"
      },
      "tauri": {
        "bundle": {
          "identifier": "com.djcontroller.app"
        }
      }
    }
    ```
- Use Tauriâ€™s `@tauri-apps/api` for IPC (Inter-Process Communication) to call Rust functions:
  ```svelte
  <script lang="ts">
    import { invoke } from '@tauri-apps/api';
    async function loadSong(filePath: string) {
      const result = await invoke('load_song', { filePath });
      return result;
    }
  </script>
  ```
- Define Rust commands in `src-tauri/src/main.rs` for audio processing:
  ```rust
  #[tauri::command]
  fn load_song(file_path: String) -> Result<String, String> {
    // Audio processing logic
    Ok("Song loaded".to_string())
  }
  ```

## Accessibility
- Use semantic HTML (e.g., `<button>`, `<input>`) in Svelte components.
- Add ARIA attributes for mixing controls (e.g., `aria-label="Adjust volume"`).
- Ensure keyboard navigation for play/pause, volume, and track selection.

## Common LLM Pitfalls to Avoid
- **Svelte 4 Syntax**:
  - Do not use `on:click`, use `onclick`.
  - Do not use `$:`, use `$derived` or `$effect`.
  - Do not use `export let`, use `$props`.
- **Tauri Misconfigurations**:
  - Do not enable SSR in `svelte.config.js`.
  - Do not use server-side load functions for Tauri APIs during prerendering.
- **Bun Errors**:
  - Do not use `npm` or `yarn` commands; use `bun`.
  - Do not use `bun:sqlite3`; use `bun:sqlite`.

## References
- Svelte 5: https://svelte.dev/docs
- Tauri 2.0: https://v2.tauri.app/
- TypeScript: https://www.typescriptlang.org/docs/
- Tailwind CSS: https://tailwindcss.com/docs